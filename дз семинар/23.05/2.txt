а) rotate(первый ForwardIterator, средний ForwardIterator, последний ForwardIterator)

Изменяет порядок элементов в диапазоне [первый, последний), таким образом , чтобы элемент , на который указывает средний становится новым первым элементом.

б) copy_if(входной итератор начала проверки условия, входной итератор конца проверки условия, выходной итератор, условие)

Копирует из диапазона элементов те элементы, проверка которых на соответствие заданному условию

в) unique(итератор первого элемента в диапазоне, итератор указывающий позицию следующую за последним элементом в диапазоне, 
условие которое должно выполняться чтобы два элемента считались эквивалентными друг другу)

Удаляет повторяющиеся элементы, которые находятся рядом друг с другом в указанном диапазоне.

г) unique_copy(итератор указывающий на позицию первого элемента в исходном диапазоне для копирования, 
итератор указывающий на позицию следующую за последним элементом в исходном диапазоне для копирования,  
итератор указывающий на позицию первого элемента в диапазоне назначения получающем копию с последовательными удаленными дубликатами, 
условие которое должно выполняться чтобы два элемента считались эквивалентными друг другу)

Копирует элементы из исходного диапазона в диапазон назначения, за исключением повторяющихся элементов, которые находятся рядом друг с другом.

д) partition(итератор адресует позицию первого элемента в разделяемом диапазоне, итератор указывающий позицию следующую за последним элементом в разделяемом диапазоне, 
условие которое должно удовлетворяться чтобы элемент был классифицирован)

Классифицирует элементы в диапазоне на два несвязанных набора, при этом эти элементы удовлетворяют унарному предикату, предшествующему тем, которые не удовлетворяют его.

е) nth_element(итератор указывающий позицию первого элемента в разделяемом диапазоне, итератор указывающий позицию элемента для правильного упорядочивания на границе раздела,
итератор обращающийся к позиции следующей за последним элементом в разделяемом диапазоне, критерий сравнения который должен соблюдаться идущими подряд элементами при упорядочении)

Правильно размещает n-йэлемент последовательности в диапазоне, который соответствует этим критериям 
все элементы перед ним меньше или равны ему, а все последующие элементы больше или равны ему.

ж) includes(итератор указывающий позицию первого элемента в первом из двух упорядоченных исходных диапазонов, 
итератор указывающий позицию следующую за последним элементом в первом из двух упорядоченных исходных диапазонов, 
итератор указывающий позицию первого элемента во втором из двух последовательных упорядоченных исходных диапазонов,
итератор указывающий позицию следующую за последним элементом во втором из двух последовательных упорядоченных исходных диапазонов,
условие, когда один элемент меньше другого).

Проверяет, содержит ли один отсортированный диапазон все элементы, содержащиеся во втором отсортированном диапазоне, 
где порядок сортировки или критерий эквивалентности элементов можно задать бинарным предикатом.

з) binary_search(итератор адресующий положение первого элемента в диапазоне для поиска, итератор адресующий положение на единицу после последнего элемента в диапазоне для поиска,
значение должно соответствовать значению элемента или удовлетворять условию со значением элемента заданному двоичным предикатом, условие когда один элемент меньше другого)

Проверяет, имеется ли элемент в отсортированный диапазон, равный указанному значению или эквивалентный ему в смысле, заданном двоичным предикатом.

и) adjacent_find(итератор адресующий положение первого элемента в диапазоне для поиска, итератор адресующий положение на единицу после последнего элемента в диапазоне для поиска,
условие которому должны удовлетворять значения соседних элементов в диапазоне по которому выполняется поиск)

Поиск двух соседних элементов, которые либо равны, либо удовлетворяют указанному условию.
